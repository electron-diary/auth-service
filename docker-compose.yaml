services:
  fastapi-app:
    container_name: fastapi-app
    image: user_service
    build: 
      context: .
      dockerfile: Dockerfile
    depends_on:
      postgres-database:
        condition: service_started
    env_file: '.env.non.dev'
    command: /bin/sh -c "../scripts/fastapi_application.sh"
    healthcheck:
      test: ['CMD-SHELL', 'curl -fsSL http://127.0.0.1:8000/healthcheck']
      interval: 15s
      timeout: 60s
      retries: 15
    ports:
      - '8000:8000'

  postgres-migration:
    container_name: postgres_migration
    build: 
      context: .
    depends_on:
      postgres-database:
        condition: service_started
    env_file: '.env.non.dev'
    command: /bin/sh -c "../scripts/run_migrations.sh"

  postgres-database:
    container_name: postgres-database
    image: 'postgres:16-alpine'
    restart: unless-stopped
    expose:
      - '5432'
    ports:
      - '5432:5432'
    env_file: '.env.non.dev'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s

  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: unless-stopped
    networks:
      - grafana
    volumes:
      - ./grafana:/etc/grafana/provisioning:rw
    expose:
      - '3100'
    ports:
      - '3000:3000'

  loki:
    image: grafana/loki:latest
    container_name: loki
    expose:
      - '3100'
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks: 
      - grafana
    ports:
      - '3100:3100'

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    restart: unless-stopped
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./promtail/promtail-config.yaml:/etc/promtail/promtail-config.yaml:ro
    command:
      - '-config.file=/etc/promtail/promtail-config.yaml'
    depends_on:
      loki:
        condition: service_started
    networks:
      - grafana
  

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus-config.yaml'
    restart: unless-stopped
    expose:
      - 9090
    networks:
      - grafana
    ports: 
      - '9090:9090'



networks:
  grafana: {}

